<svg xmlns='http://www.w3.org/2000/svg' viewBox='-10 -10 20 20'>
<script type="text/ecmascript"><![CDATA[
  var root;
  var svgns = 'http://www.w3.org/2000/svg';

  function drawLine(angle,off,clr,thick,opa){ // 
    var path = root.ownerDocument.createElementNS(svgns, 'path');
    path.setAttribute('opacity', opa||'1');
    path.setAttribute('stroke-width', thick|| 0.01);
    path.setAttribute('stroke', clr||'gray');
    var line = 'M-1000,0 L1000,0';
    path.setAttribute('d', line);
    path.setAttribute('transform', 'translate('+off.x+','+off.y+') rotate('+angle+')');
    root.appendChild(path);
  }
  function drawSquare(id,off,clr,thick,opa){ 
      var rect = root.ownerDocument.createElementNS(svgns, 'rect');      
      if (id) rect.setAttribute('id', id);
      rect.setAttribute('opacity', opa||'1');
      rect.setAttribute('stroke-width', thick|| 0.01);
      rect.setAttribute('stroke', clr||'gray');
      
      rect.setAttribute('x', off.x-.5);
      rect.setAttribute('y', off.y-.5);
      rect.setAttribute('width', 1);
      rect.setAttribute('height', 1);
      root.appendChild(rect);
  }
  function drawPoint(off,clr,thick,opa){ 
      var circle = root.ownerDocument.createElementNS(svgns, 'circle');      
      circle.setAttribute('opacity', opa||'1');
      circle.setAttribute('stroke','none');
      circle.setAttribute('fill', clr||'gray');
      
      circle.setAttribute('cx', off.x);
      circle.setAttribute('cy', off.y);
      circle.setAttribute('r', thick||0.05  );
      root.appendChild(circle);
  }
  function distancePointOriginLine(p,deg){ //point angle of line in degres
    // http://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line
    // E's normal n : [cos(angleE),sin(angleE)]
    // p: [+/-1,+/-1]
    // cross(-p,n)*n
    // distance = || -p - ( cross(-p,n)*n )  ||
    var rad = deg*Math.PI/180;
    // var n = [-Math.sin(rad),Math.cos(rad)];    
    var n = [Math.cos(rad),Math.sin(rad)];    
    var cross_pn = -p[0]*n[0] - p[1]*n[1];
    var dv = [ -p[0] - cross_pn*n[0], -p[1] - cross_pn*n[1] ];
    var d = Math.sqrt(dv[0]*dv[0]+dv[1]*dv[1]);
    return d;
  }
  
  function eHalfThickness(deg){  // .5 <= maxD <= sqrt(2)/2
    // thickness of E is Max of distance from the four (±0.5,±0.5) corners of square to line.
    // two of these pairs are identical -
    // one distance will be below 1, the other above, max is the one >1
    var maxD=0;
    for (var sign=-1;sign<=1;sign+=2){
      var p = [sign*1/2,1/2];
      var d = distancePointOriginLine(p,deg);
      // console.log('p,d',p,d);
      // drawLine(90+deg,{x:0,y:0},'green');
      if (d>=.5){ // this is the max!
        return d;
      }
      maxD = Math.max(d,maxD);
    }
    // should not happ, one of these two >=1
    return maxD;
  }

  range=[]; for (var i=0;i<10;i++)range.push(i);
  function start(evt) {
    root = evt.target;
    
    // grid
    range.forEach(function(i){
      drawLine(0,{x:0,y: i});        
      drawLine(0,{x:0,y:-i});        

      drawLine(90,{x: i,y:0});
      drawLine(90,{x:-i,y:0});
    });
    var angleE=30;
    
    var maxD = eHalfThickness(angleE);
    drawLine(angleE,{x:0,y:0},'red',maxD*2,.1);
    drawLine(angleE,{x:0,y:0},'red');
    
    drawSquare('square',{x:0,y:0},'blue',.02);
    
    var sq = root.ownerDocument.getElementById('square');
    var offset=-0.0;
    sq.setAttribute('transform','rotate('+angleE+') translate('+offset+',0) rotate('+(-angleE)+')');

    // animate sqaure
    if (0) setInterval(function(){
      offset = (offset+0.05)%2;
      sq.setAttribute('transform','rotate('+angleE+') translate('+offset+',0) rotate('+(-angleE)+')');
    },100);

    function check(p){
      var pv=[p.x,p.y];
      var d = distancePointOriginLine(pv,angleE);
      // console.log('p,d,ok',pv,d,ok);
      var isIn = (d<=maxD);
      var color = isIn ? 'red' : 'grey';
      drawPoint(p,color);
      return isIn;
    }
    // point grids
    if (0) range.forEach(function(j){
      range.forEach(function(i){
        check({x:i,y:j});
        if (i>0 || j>0) {
          check({x:-i,y: j});
          check({x: i,y:-j});
          check({x:-i,y:-j});
        } 
      });
    });
    
    function checkR(p){
      if ((p.x*p.x+p.y*p.y)>100) return false;
      var isIn = check(p);
      while (isIn) {
        isIn=checkR({x:p.x+1,y:p.y});
      }
      // isIn=checkR({x:p.x,y:p.y+1});
      return isIn;
    }
    checkR({x:0,y:0});
    
    //  normalize E - horizontal
    var rot = root.ownerDocument.getElementById('rotation');
    // rot.setAttribute('transform','rotate('+(-angleE)+')');

  }
  
]]></script>
  <g transform="scale(1,-1)">
    <g id="rotation" transform="rotate(0)">
      <g id="root" stroke="black" fill="none" onload="start(evt)"/>
    </g>
  </g>
</svg>
