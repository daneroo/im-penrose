<svg xmlns='http://www.w3.org/2000/svg' viewBox='-10 -10 20 20'>
<script type="text/ecmascript"><![CDATA[
  var root;
  var svgns = 'http://www.w3.org/2000/svg';

  // from solarized accents: http://ethanschoonover.com/solarized
  var solarized = {
    yellow:'#b58900',
    orange:'#CB4B16',
    red:'#DC322F',
    magenta:'#D33682',
    violet:'#6C71C4',
    blue:'#268BD2',
    cyan:'#2AA198',
    green:'#859900'
  }; 

  function drawPoint(p,clr,thick,opa){ 
      var circle = root.ownerDocument.createElementNS(svgns, 'circle');      
      circle.setAttribute('opacity', opa||'1');
      circle.setAttribute('stroke','none');
      circle.setAttribute('fill', clr||'gray');
      
      circle.setAttribute('cx', p.x);
      circle.setAttribute('cy', p.y);
      circle.setAttribute('r', thick||0.05  );
      root.appendChild(circle);
  }
  function toRad(deg){return deg*Math.PI/180;}
  function toDeg(rad){return rad*180/Math.PI;}
  function vmult(s,p){ // s:scalar, p={x,y}
    return {x:s*p.x,y:s*p.y};
  }
  function drawLine(angle,off,clr,thick,opa){ // 
    var path = root.ownerDocument.createElementNS(svgns, 'path');
    path.setAttribute('opacity', opa||'1');
    path.setAttribute('stroke-width', thick|| 0.01);
    path.setAttribute('stroke', clr||'gray');
    var line = 'M-1000,0 L1000,0';
    path.setAttribute('d', line);
    path.setAttribute('transform', 'translate('+off.x+','+off.y+') rotate('+angle+')');
    root.appendChild(path);
  }
  

  var eDeg = [];  // angles for basis vectors
  var e = []; // basis vectors
   // translation gamma_i
  var g=[0.3273951115552336, 0.6228435167577118, 0.5536088130902499, 0.12421905994415283, 0.6411375142633915];
  for (var i=0;i<5;i++) {
    deg=90+i*72;
    rad=toRad(deg)
    eDeg.push(deg);
    e.push({x:-Math.sin(rad),y:Math.cos(rad)})
    // g.push(Math.random());
  }
  var pColor=[solarized.yellow,solarized.magenta,solarized.violet,solarized.cyan,solarized.green];
  var range=[]; for (var i=-50;i<=50;i++)range.push(i);
  function start(evt) {
    root = evt.target;

    // grid
    if(0) range.forEach(function(i){
      drawLine(0,{x:0,y: i},null,null,0.3);        
      drawLine(90,{x: i,y:0},null,null,0.3);
    });

    for (var i=0;i<eDeg.length;i++){
      var deg=eDeg[i],c=pColor[i];
      // drawLine(deg,{x:0,y:0},c,0.02);        
      range.forEach(function(n){
        var thick=(i<2 && n===0) ? 0.04 : 0.02;
        drawLine(deg,vmult(n+g[i],e[i]),c,thick);
      });
    }
    // intersect e0_0 && e1_0
    // e[0].y * (y-g[0]*e[0].y) =  e[0].x * (x-g[0]*e[0].x)
    //   given: e[0].x=-1, e[0].y=0;
    //  ->  x  = g[0]*e[0].x 
    // x=g[0]
    // y = e[0].x/e[0].y * (x-g[0]*e[0].x)
    drawLine(90,vmult(g[0],e[0]),'black',0.1,0.1);
    // e[1].y * (y-g[1]*e[1].y) =  e[1].x * (x-g[1]*e[1].x)
    drawLine(90+72,vmult(g[1],e[1]),'black',0.1,0.1);
    //intersection:
    // x  = g[0]*e[0].x 
    // e[1].y * (y-g[1]*e[1].y) =  e[1].x * (x-g[1]*e[1].x)
    // e[1].y * (y-g[1]*e[1].y) =  e[1].x * (g[0]*e[0].x-g[1]*e[1].x)
    // y-g[1]*e[1].y =  e[1].x/e[1].y * (g[0]*e[0].x-g[1]*e[1].x)
    // y =  ( e[1].x/e[1].y * (g[0]*e[0].x-g[1]*e[1].x) ) + g[1]*e[1].y
    var intersect={
      x: g[0]*e[0].x,
      y: ( (e[1].x * (g[0]*e[0].x-g[1]*e[1].x) ) / e[1].y ) + g[1]*e[1].y
    };
    drawPoint(intersect,'red',0.1,0.3);
    drawLine(90,{x:intersect.x,y:0},'red',0.04,0.9);
    drawLine(0,{x:0,y:intersect.y},'red',0.04,0.9);
    
  }
  
]]></script>
  <g transform="scale(5,-5)">
    <g id="rotation" transform="rotate(0)">
      <g id="root" stroke="black" fill="none" onload="start(evt)"/>
    </g>
  </g>
</svg>
